Name:SHREYA ASHOKA
EXECUTED DATE:30/08/2023
It first takes the number of nodes in the social network as input.
Then, it takes the adjacency matrix as input, where graph[i][j] is 1 if there is a connection between node i and node j.
It initializes an array visited to keep track of visited nodes and a component variable to count the connected components.
It uses a depth-first search (DFS) algorithm to traverse the network, starting from each unvisited node, and assigns a component number to each node.
Finally, it prints out the nodes in each connected component and the total number of connected components.
#include <stdio.h>
#include <stdbool.h>

#define MAX_NODES 100

// Function to perform Depth-First Search
void dfs(int node, int n, bool visited[], int adjacencyMatrix[][MAX_NODES]) {
    visited[node] = true;
    printf("%d ", node);

    for (int i = 0; i < n; i++) {
        if (adjacencyMatrix[node][i] && !visited[i]) {
            dfs(i, n, visited, adjacencyMatrix);
        }
    }
}

// Function to find connected components using DFS
void findConnectedComponents(int n, int adjacencyMatrix[][MAX_NODES]) {
    bool visited[MAX_NODES] = {false};

    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            printf("Connected Component: ");
            dfs(i, n, visited, adjacencyMatrix);
            printf("\n");
        }
    }
}

int main() {
    int n; // Number of nodes in the graph
    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    int adjacencyMatrix[MAX_NODES][MAX_NODES];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &adjacencyMatrix[i][j]);
        }
    }

    printf("Connected Components:\n");
    findConnectedComponents(n, adjacencyMatrix);

    return 0;
}
/......................................................
#include <stdio.h>
#include <stdbool.h>

#define MAX_NODES 100

// Function to perform Depth-First Search
void DFS(int node, int n, bool visited[], int adjacencyMatrix[][MAX_NODES]) {
    printf("%d ", node);
    visited[node] = true;

    for (int i = 0; i < n; i++) {
        if (adjacencyMatrix[node][i] == 1 && !visited[i]) {
            DFS(i, n, visited, adjacencyMatrix);
        }
    }
}

// Function to find connected components
void findConnectedComponents(int n, int adjacencyMatrix[][MAX_NODES]) {
    bool visited[MAX_NODES] = {false};

    printf("Connected Components:\n");
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            DFS(i, n, visited, adjacencyMatrix);
            printf("\n");
        }
    }
}

int main() {
    int n;
    printf("Enter the number of nodes in the social network: ");
    scanf("%d", &n);

    int adjacencyMatrix[MAX_NODES][MAX_NODES];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &adjacencyMatrix[i][j]);
        }
    }

    findConnectedComponents(n, adjacencyMatrix);

    return 0;
}
